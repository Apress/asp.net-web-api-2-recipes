<#@ template language="VB" HostSpecific="True" #>
<#@ output extension="vb" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="System.String" name="EntitySetName" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
<#@ parameter type="System.String" name="ModelTypeNamespace" #>
<#@ parameter type="System.String" name="ODataModificationMessage" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Collections.Generic.HashSet(Of System.String)" name="RequiredNamespaces" #>
<#
Dim routePrefix As String = "odata/" + ControllerRootName
#>
Imports System
Imports System.Collections.Generic
Imports System.Data
Imports System.Linq
Imports System.Net
Imports System.Net.Http
<# If (UseAsync) Then #>
Imports System.Threading.Tasks
<# End If #>
Imports System.Web.Http
Imports System.Web.Http.ModelBinding
Imports System.Web.Http.OData
Imports System.Web.Http.OData.Query
Imports System.Web.Http.OData.Routing
<# For Each namespaceName As String In RequiredNamespaces  #>
Imports <#= namespaceName #>
<# Next #>
Imports Microsoft.Data.OData

Namespace <#= Namespace #>
<#
    Dim fullModelTypeName = ModelTypeNamespace + "." + ModelTypeName
    Dim primaryKeyName = ModelMetadata.PrimaryKeys(0).PropertyName
    Dim primaryKeyShortTypeName = ModelMetadata.PrimaryKeys(0).ShortTypeName
    Dim primaryKeyDefaultValue = ModelMetadata.PrimaryKeys(0).DefaultValue
    Dim primaryKeyType = ModelMetadata.PrimaryKeys(0).TypeName
    Dim primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys(0).IsAutoGenerated
#>
<# If (Not String.IsNullOrEmpty(ODataModificationMessage)) Then #>

    '<#= ODataModificationMessage #>

    'Imports System.Web.Http.OData.Builder
<# If (Not String.IsNullOrEmpty(ModelTypeNamespace)) Then #>
    'Imports <#= ModelTypeNamespace #>
<# End If #>
    'Dim builder As New ODataConventionModelBuilder
    'builder.EntitySet(Of <#= ModelTypeName #>)("<#= ControllerRootName #>")
<#
Dim encounteredTypes As New HashSet(Of String)
encounteredTypes.Add(fullModelTypeName)
For Each modelProperty As PropertyMetadata In ModelMetadata.Properties
    If (modelProperty.IsAssociation) AndAlso encounteredTypes.Add(modelProperty.TypeName) Then 
#>
    'builder.EntitySet(Of <#= modelProperty.ShortTypeName #>)("<#= GetEntitySetName(modelProperty) #>")
<#	End If
Next
#>
    'config.Routes.MapODataRoute("odata", "odata", builder.GetEdmModel())
<# End If #>

    Public Class <#= ControllerName #>
        Inherits ODataController

        Private _validationSettings As New ODataValidationSettings()

        ' GET: <#= routePrefix #>
<# If (UseAsync) Then #>
        Async Function Get<#= ControllerRootName #>(queryOptions As ODataQueryOptions(Of <#= ModelTypeName #>)) As Task(Of IHttpActionResult)
<# Else #>
        Function Get<#= ControllerRootName #>(queryOptions As ODataQueryOptions(Of <#= ModelTypeName #>)) As IHttpActionResult
<# End If #>
            ' validate the query.
            Try
                queryOptions.Validate(_validationSettings)
            Catch ex As ODataException
                Return BadRequest(ex.Message)
            End Try

            ' Return Ok(Of IEnumerable(Of <#= ModelTypeName #>))(<#= EntitySetVariable #>)
            Return StatusCode(HttpStatusCode.NotImplemented)
        End Function

        ' GET: <#= routePrefix #>(5)
<# If (UseAsync) Then #>
        Async Function Get<#= ModelTypeName #>(<FromODataUri> key As <#= primaryKeyShortTypeName #>, queryOptions As ODataQueryOptions(Of <#= ModelTypeName #>)) As Task(Of IHttpActionResult)
<# Else #>
        Function Get<#= ModelTypeName #>(<FromODataUri> key As <#= primaryKeyShortTypeName #>, queryOptions As ODataQueryOptions(Of <#= ModelTypeName #>)) As IHttpActionResult
<# End If #>
            ' validate the query.
            Try
                queryOptions.Validate(_validationSettings)
            Catch ex As ODataException
                Return BadRequest(ex.Message)
            End Try

            ' Return Ok(Of <#= ModelTypeName #>)(<#= ModelVariable #>)
            Return StatusCode(HttpStatusCode.NotImplemented)
        End Function

        ' PUT: <#= routePrefix #>(5)
<# If (UseAsync) Then #>
        Async Function Put(ByVal key As <#= primaryKeyShortTypeName #>, ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As Task(Of IHttpActionResult)
<# Else #>
        Function Put(ByVal key As <#= primaryKeyShortTypeName #>, ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As IHttpActionResult
<# End If #>
            If Not ModelState.IsValid Then
                Return BadRequest(ModelState)
            End If

            If Not key = <#= ModelVariable #>.<#= primaryKeyName #> Then
                Return BadRequest()
            End If

            ' TODO: Add replace logic here.

            ' Return Updated(<#= ModelVariable #>)
            Return StatusCode(HttpStatusCode.NotImplemented)
        End Function

        ' POST: <#= routePrefix #>
<# If (UseAsync) Then #>
        Async Function Post(ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As Task(Of IHttpActionResult)
<# Else #>
        Function Post(ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As IHttpActionResult
<# End If #>
            If Not ModelState.IsValid Then
                Return BadRequest(ModelState)
            End If

            ' Return Created(<#= ModelVariable #>)
            Return StatusCode(HttpStatusCode.NotImplemented)
        End Function

        ' PATCH: <#= routePrefix #>(5)
        <AcceptVerbs("PATCH", "MERGE")>
<#		If (UseAsync) Then #>
        Async Function Patch(<FromODataUri> ByVal key As <#= primaryKeyShortTypeName #>, ByVal delta As Delta(Of <#= ModelTypeName #>)) As Task(Of IHttpActionResult)
<#		Else #>
        Function Patch(<FromODataUri> ByVal key As <#= primaryKeyShortTypeName #>, ByVal delta As Delta(Of <#= ModelTypeName #>)) As IHttpActionResult
<#		End If #>
            If Not ModelState.IsValid Then
                Return BadRequest(ModelState)
            End If

            ' TODO: Get the entity here.

            ' delta.Patch(<#= ModelVariable #>)

            ' TODO: Save the patched entity.

            ' Return Updated(<#= ModelVariable #>)
            Return StatusCode(HttpStatusCode.NotImplemented)
        End Function

        ' DELETE: <#= routePrefix #>(5)
<# If (UseAsync) Then #>
        Async Function Delete(<FromODataUri> ByVal key As <#= primaryKeyShortTypeName #>) As Task(Of IHttpActionResult)
<# Else #>
        Function Delete(<FromODataUri> ByVal key As <#= primaryKeyShortTypeName #>) As IHttpActionResult
<# End If #>
            ' TODO: Add delete logic here.

            ' Return StatusCode(HttpStatusCode.NoContent)
            Return StatusCode(HttpStatusCode.NotImplemented)
        End Function
<# For Each modelProperty As PropertyMetadata In ModelMetadata.Properties #>
<#	If (modelProperty.IsAssociation) Then
    Dim isSingleResult = (modelProperty.AssociationDirection = AssociationDirection.OneToOne OrElse modelProperty.AssociationDirection = AssociationDirection.ManyToOne)
#>

        ' GET: <#= routePrefix #>(5)/<#= modelProperty.PropertyName #>
<# If (isSingleResult) Then #>
        Function Get<#= modelProperty.PropertyName #>(<FromODataUri> ByVal key As <#= primaryKeyShortTypeName #>) As IHttpActionResult
<# Else #>
        Function Get<#= modelProperty.PropertyName #>(<FromODataUri> ByVal key As <#= primaryKeyShortTypeName #>, queryOptions As ODataQueryOptions(Of <#= modelProperty.ShortTypeName #>)) As IHttpActionResult
<# End If
   If (isSingleResult) Then #>
            ' Return Ok(Of <#= modelProperty.ShortTypeName #>)(modelProperty.PropertyName.ToLowerInvariant())
<# Else #>
            ' validate the query.
            Try
                queryOptions.Validate(_validationSettings)
            Catch ex As ODataException
                Return BadRequest(ex.Message)
            End Try

            ' Return Ok(Of IEnumerable(Of <#= modelProperty.ShortTypeName #>))(modelProperty.PropertyName.ToLowerInvariant())
<# End If #>
            Return StatusCode(HttpStatusCode.NotImplemented)
        End Function
<# End If #>
<# Next #>
    End Class
End Namespace
<#+
    Function GetRelatedModelMetadata(ByVal modelProperty As PropertyMetadata) As RelatedModelMetadata
        Dim propertyModel As RelatedModelMetadata = Nothing
        Dim relatedProperties As IDictionary(Of String, RelatedModelMetadata)
        If (ModelMetadata.RelatedEntities IsNot Nothing) Then
            relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(Function(item) item.AssociationPropertyName)
        Else
            relatedProperties = New Dictionary(Of String, RelatedModelMetadata)
        End If
        relatedProperties.TryGetValue(modelProperty.PropertyName, propertyModel)

        Return propertyModel
    End Function

    Function GetEntitySetName(ByVal modelProperty As PropertyMetadata) As String
        Dim propertyModel As RelatedModelMetadata = GetRelatedModelMetadata(modelProperty)
        Return If((propertyModel IsNot Nothing), propertyModel.EntitySetName, modelProperty.ShortTypeName)
    End Function
#>