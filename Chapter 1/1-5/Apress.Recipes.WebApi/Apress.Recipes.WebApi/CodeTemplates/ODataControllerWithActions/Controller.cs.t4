<#@ template language="C#" HostSpecific="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="System.String" name="EntitySetName" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
<#@ parameter type="System.String" name="ModelTypeNamespace" #>
<#@ parameter type="System.String" name="ODataModificationMessage" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
<#
string routePrefix = "odata/" + ControllerRootName;
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Net;
using System.Net.Http;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Web.Http;
using System.Web.Http.ModelBinding;
using System.Web.Http.OData;
using System.Web.Http.OData.Query;
using System.Web.Http.OData.Routing;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>
using Microsoft.Data.OData;

namespace <#= Namespace #>
{
<#
    var fullModelTypeName = ModelTypeNamespace + "." + ModelTypeName;
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
#>
<# if (!String.IsNullOrEmpty(ODataModificationMessage)) { #>
    /*
    <#= ODataModificationMessage #>

    using System.Web.Http.OData.Builder;
<# if (!String.IsNullOrEmpty(ModelTypeNamespace)) { #>
    using <#= ModelTypeNamespace #>;
<# } #>
    ODataConventionModelBuilder builder = new ODataConventionModelBuilder();
    builder.EntitySet<<#= ModelTypeName #>>("<#= ControllerRootName #>");
<#
HashSet<string> encounteredTypes = new HashSet<string>();
encounteredTypes.Add(fullModelTypeName);
foreach (var property in ModelMetadata.Properties) {
    if (property.IsAssociation && encounteredTypes.Add(property.TypeName)) { 
#>
    builder.EntitySet<<#= property.ShortTypeName #>>("<#= GetEntitySetName(property) #>"); 
<# } } #>
    config.Routes.MapODataRoute("odata", "odata", builder.GetEdmModel());
    */
<# } #>
    public class <#= ControllerName #> : ODataController
    {
        private static ODataValidationSettings _validationSettings = new ODataValidationSettings();

        // GET: <#= routePrefix #>
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Get<#= ControllerRootName #>(ODataQueryOptions<<#= ModelTypeName #>> queryOptions)
<# } else { #>
        public IHttpActionResult Get<#= ControllerRootName #>(ODataQueryOptions<<#= ModelTypeName #>> queryOptions)
<# } #>
        {
            // validate the query.
            try
            {
                queryOptions.Validate(_validationSettings);
            }
            catch (ODataException ex)
            {
                return BadRequest(ex.Message);
            }

            // return Ok<IEnumerable<<#= ModelTypeName #>>>(<#= EntitySetVariable #>);
            return StatusCode(HttpStatusCode.NotImplemented);
        }

        // GET: <#= routePrefix #>(5)
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Get<#= ModelTypeName #>([FromODataUri] <#= primaryKeyShortTypeName #> key, ODataQueryOptions<<#= ModelTypeName #>> queryOptions)
<# } else { #>
        public IHttpActionResult Get<#= ModelTypeName #>([FromODataUri] <#= primaryKeyShortTypeName #> key, ODataQueryOptions<<#= ModelTypeName #>> queryOptions)
<# } #>
        {
            // validate the query.
            try
            {
                queryOptions.Validate(_validationSettings);
            }
            catch (ODataException ex)
            {
                return BadRequest(ex.Message);
            }

            // return Ok<<#= ModelTypeName #>>(<#= ModelVariable #>);
            return StatusCode(HttpStatusCode.NotImplemented);
        }

        // PUT: <#= routePrefix #>(5)
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Put([FromODataUri] <#= primaryKeyShortTypeName #> key, <#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public IHttpActionResult Put([FromODataUri] <#= primaryKeyShortTypeName #> key, <#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (key != <#= ModelVariable #>.<#= primaryKeyName #>)
            {
                return BadRequest();
            }

            // TODO: Add replace logic here.

            // return Updated(<#= ModelVariable #>);
            return StatusCode(HttpStatusCode.NotImplemented);
        }

        // POST: <#= routePrefix #>
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Post(<#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public IHttpActionResult Post(<#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            // TODO: Add create logic here.

            // return Created(<#= ModelVariable #>);
            return StatusCode(HttpStatusCode.NotImplemented);
        }

        // PATCH: <#= routePrefix #>(5)
        [AcceptVerbs("PATCH", "MERGE")]
<#		if (UseAsync) { #>
        public async Task<IHttpActionResult> Patch([FromODataUri] <#= primaryKeyShortTypeName #> key, Delta<<#= ModelTypeName #>> delta)
<#		} else { #>
        public IHttpActionResult Patch([FromODataUri] <#= primaryKeyShortTypeName #> key, Delta<<#= ModelTypeName #>> delta)
<#		} #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            // TODO: Get the entity here.

            // delta.Patch(<#= ModelVariable #>);

            // TODO: Save the patched entity.

            // return Updated(<#= ModelVariable #>);
            return StatusCode(HttpStatusCode.NotImplemented);
        }

        // DELETE: <#= routePrefix #>(5)
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Delete([FromODataUri] <#= primaryKeyShortTypeName #> key)
<# } else { #>
        public IHttpActionResult Delete([FromODataUri] <#= primaryKeyShortTypeName #> key)
<# } #>
        {
            // TODO: Add delete logic here.

            // return StatusCode(HttpStatusCode.NoContent);
            return StatusCode(HttpStatusCode.NotImplemented);
        }
<# foreach (var property in ModelMetadata.Properties) {
    if (property.IsAssociation) { 
    var isSingleResult = property.AssociationDirection == AssociationDirection.OneToOne || property.AssociationDirection == AssociationDirection.ManyToOne;
#>

        // GET: <#= routePrefix #>(5)/<#= property.PropertyName #>
<# if (isSingleResult) { #>
        public IHttpActionResult Get<#= property.PropertyName #>([FromODataUri] <#= primaryKeyShortTypeName #> key)
<# } else { #>
        public IHttpActionResult Get<#= property.PropertyName #>([FromODataUri] <#= primaryKeyShortTypeName #> key, ODataQueryOptions<<#= property.ShortTypeName #>> queryOptions)
<# } #>
        {
<# if (isSingleResult) { #>
            // return Ok<<#= property.ShortTypeName #>>(property.PropertyName.ToLowerInvariant());
<# } else { #>
            // validate the query.
            try
            {
                queryOptions.Validate(_validationSettings);
            }
            catch (ODataException ex)
            {
                return BadRequest(ex.Message);
            }

            // return Ok<IEnumerable<<#= property.ShortTypeName #>>>(property.PropertyName.ToLowerInvariant());
<# } #>
            return StatusCode(HttpStatusCode.NotImplemented);
        }
<# } } #>
    }
}
<#+
RelatedModelMetadata GetRelatedModelMetadata(PropertyMetadata property){
    RelatedModelMetadata propertyModel;
    IDictionary<string, RelatedModelMetadata> relatedProperties;
    if(ModelMetadata.RelatedEntities != null)
    {
        relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
    }
    else
    {
        relatedProperties = new Dictionary<string, RelatedModelMetadata>();
    }
    relatedProperties.TryGetValue(property.PropertyName, out propertyModel);

    return propertyModel;
}


string GetEntitySetName(PropertyMetadata property) {
    RelatedModelMetadata propertyModel = GetRelatedModelMetadata(property);
    return propertyModel != null ? propertyModel.EntitySetName : property.ShortTypeName;
}
#>